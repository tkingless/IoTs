# Prototyping a Remote controlled robot

## Keys
1. Events: robotic behaviors
2. Communications: BLE, UART
3. Operations and Env: process, boot-config
4. Other hardware scripts: AppInventor, microbits

##Usage
1. source the UART venv
2. sudo pigpiod
3. create /tmp/Robot/ folder
4. python Robot.py start
5. python Robot.py stop

##Installation from fresh OS

1. Set Englsih Lang, password, username and etc.


2. Install bluez 5.48: http://www.bluez.org/download/
3. Install dependencies: sudo apt-get install -y libusb-dev libdbus-1-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev
4. Turn the bluetooth service's BLE feature: sudo nano /lib/systemd/system/bluetooth.service, enable --experimental feature

5. Setup Github environment
6. Download source code


##Android BLE central to RPi peripheral cycle:

bluetooth paired (Device Level) -> advertisment scanning (App Level) -> connected (App Level)
disconnect (App Level) -> bluetooth dispaired (Device Level)


Connection without Blueman, use bluetoothctl instead:

- bluetoothctl
	- remove [dev by MAC]
	- default-agent
	- then on Android, mannually try to pair with the RPi first
	- then yes, on the Android side, yes too.
	- make sure the Andriod shake to confirm connection
	- exit

## R232 Hardware UART

- ls /dev/cu.*
- screen /dev/{serialPort} 115200

##Connection pins

1. Lmicrobit pin 1 - RPi 23
2. Lmicrobit pin 0 - RPi 24
3. Rmicrobit pin 0 - RPi 25
4. Rmicrobit pin 1 - RPi 18
5. Servo Vcc red line - 5v
6. Servo Grd brown line - 0v
7. Lservo signal - RPi 4
8. Rservo signal - RPi 12
9. Buzzer - RPi 26

## Auto up

- sudo systemctl enable pigpiod
- refer to Scripts/robotd.service, put at /lib/systemd/system:
- sudo systemctl enable robotd


##Full installation points:

1. Go to website https://www.raspberrypi.org/downloads/
2. then download ubuntu mate (ubuntu-mate-16.04.2-desktop-armhf-raspberry-pi.img.xz)
3. Use the unarchiver to extract the file (extracted file name: ubuntu-mate-16.04.2-desktop-armhf-raspberry-pi.img)
4. Open terminal
5. use "diskutil list" to find the path of sd card e.g."/dev/disk3"
6. Unmount the directory e.g.'diskutil unmountDisk "/dev/disk3"'
7. burn the img file into the sd card, sudo dd if="abs_file_path_name" of="abs_path_of_sd_card" bs=2m
	- a long wait around 1 hour
8. Make customization of OS, accounts, bash, git, wifi (need to reboot) etc...
	- configure git
9. Clone this project
10. Set up virtual env: sudo pip install virtualenv
	- virtualenv {venv}
	- activate the venv
	- cd to IoTs, "pip install -r requirements.txt"

11. Update Bluez, already included, 5.41, up to 5.49:
	- Download http://www.kernel.org/pub/linux/bluetooth/bluez-5.49.tar.xz
	- tar xvf bluez-5.49.tar.xz
	- sudo apt-get update
	- sudo apt-get install -y libusb-dev libdbus-1-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev
	- ./configure
	- make
	- sudo make install
	- edit /lib/systemd/system/bluetooth.service, append  --experimental to the ExecStart line

10. Enable UART serial monitor by "sudo raspi-config"